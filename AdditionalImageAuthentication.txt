/**
 * Additional Image Authentication
 *
 * 通常認証に加えて画像認証を行います。
 *
 * @category    plugin
 * @version     1.01
 * @license     http://www.gnu.org/copyleft/gpl.html GNU Public License (GPL)
 * @author      soushi
 * @internal    @events        OnManagerLoginFormRender,OnPluginFormRender,OnManagerAuthentication
 * @internal    @modx_category AdditionalImageAuthentication
 * @internal    @properties &imgSelect=選択画像パス;text;/assets/plugins/AdditionalImageAuthentication/select/ &imgUnselect=非選択画像パス;text;/assets/plugins/AdditionalImageAuthentication/unselect/ &viewCount=画像の表示数;text;6 &authExplain=認証内容の説明;text;十二支の動物を全部選んでください。
 */

//----------------------------------------------------------------- 変数
//プラグインから受け取って利用する変数
//
//  $id       ... プラグインのID
//  $username ... ユーザ名(db->escape済)
//

//画像の拡張子/MIME
$contentTypes = 
	array('jpg'  =>'image/jpeg',
				'jpeg' =>'image/jpeg',
				'gif'  =>'image/gif',
				'png'  =>'image/png',
				); 

//----------------------------------------------------------------- 関数
/******************************************************
 *
 * ログ出力
 *
 * ・イベントによってそのまま出力したり、イベントログに出すようにする。
 *
 * $modx  : object : modxオブジェクト
 * $msg   : string : ログメッセージ
 * return : string : 必ず空文字列
 *
 *****************************************************/
$LogOut=function($modx,$msg){
	//php5.4以前では$thisが使えないので、引数で引っ張ってます。

  switch ($modx->event->name) {
	case 'OnPluginFormRender':
		$modx->event->output('<span style="font-weight:bold;color: red;">'.$msg.'</span>');
		break;
	default:
		$modx->logEvent(999,2,$msg,'[plugin]AdditionalImageAuthentication');
  }
  return '';
};

/******************************************************
 *
 * 指定ディレクトリのファイル一覧を返す
 *
 * ・イベントによってそのまま出力したり、イベントログに出すようにする。
 *
 * $path  : string : ディレクトリパス
 * $mt    : array  : 拡張子/MIME情報
 * return : array  : ファイル一覧
 *
 *****************************************************/
$GetImgFiles=function($path,$mt){
	$out=array();
	if($hndl = opendir($path)) {
		while( false !== ($file = readdir($hndl)) ){
			$file_ext = preg_replace('/^.*\./','',$file);
			if( isset($mt[$file_ext]) ){
				$out[]=$file;
			}
    }
	}
	return $out;
};

/******************************************************
 *
 * 画像をbase64エンコードに変換
 *
 * ・imgタグに張り付けられる形式に変更
 *
 * $img   : string : 画像ファイル
 * $mt    : array  : 拡張子/MIME情報
 * return : array  : base64エンコードされた画像
 *
 *****************************************************/
$ImgToBase64=function($img,$mt){
	if(! is_file( $img ) ){
		return '';
	}
	$file_ext = preg_replace('/^.*\./','',$img);
	return 'data:'.$mt[$file_ext].';base64,'.base64_encode(file_get_contents($img));
};

//----------------------------------------------------------------- メイン

//OnPluginFormRenderイベントは別のプラグイン表示の際も実行されるので関係ないときは何もしない
if( $this->event->name == 'OnPluginFormRender' ){
	$tbl=$this->getFullTableName('site_plugins');
	$rs = $this->db->select('name',$tbl,"id = $id");
	if( !( ($row = $modx->fetchRow($rs)) &&  $row['name'] == 'Additional Image Authentication') ){
		return '';
	}
}

//パスの調整
$imgSelect   = preg_replace('/\/$/','',preg_replace('/^\//','',$imgSelect  )).'/';
$imgUnselect = preg_replace('/\/$/','',preg_replace('/^\//','',$imgUnselect)).'/';
if( !is_dir(MODX_BASE_PATH . $imgSelect) || !is_dir(MODX_BASE_PATH . $imgUnselect) ){
	return $LogOut($this,'選択画像パス、非選択画像パスがディレクトリではありません。');
}

//表示数の調整
if( !is_numeric($viewCount) ){
	$LogOut($this,'画像の表示数は数字で指定してください。');
	$viewCount=5;
}elseif( $viewCount < 2 ){
	$LogOut($this,'画像の表示数は2以上の数字で指定してください。');
	$viewCount=5;
}

//イベントごとの処理
switch ($this->event->name) {
case 'OnPluginFormRender': //プラグイン画面では画像一覧を表示

	$out.='<div class="tab-page" id="AddAIA">';
	$out.='<h2 class="tab">認証用画像</h2>';
	//$out.='<script type="text/javascript">tp.addTabPage( document.getElementById( "AddInfo" ) );</script>';
	$out.='<div class="sectionHeader">選択画像一覧</div>';
	$out.='<div class="sectionBody">';
	$imgs=$GetImgFiles(MODX_BASE_PATH . $imgSelect,$contentTypes);
	foreach( $imgs as $key => $val){
		$no=$key+1;
		$out.= $no.'.<img src="'.MODX_BASE_URL.$imgSelect.$val.'" alt="'.$no.'" width="120" height="120" style="margin:5px;">';
	}
	$out.='</div>';
	$out.='<div class="sectionHeader">非選択画像一覧</div>';
	$out.='<div class="sectionBody">';
	$imgs=$GetImgFiles(MODX_BASE_PATH . $imgUnselect,$contentTypes);
	foreach( $imgs as $key => $val){
		$no=$key+1;
		$out.= $no.'.<img src="'.MODX_BASE_URL.$imgUnselect.$val.'" alt="'.$no.'" width="120" height="120" style="margin:5px;">';
	}
	$out.='</div>';
	$out.='</div>';

	//プラグインのタブに追加させる
	$out.='<script type="text/javascript">
             $j(function(){
               $j("#snipetPane").append($j("#AddAIA"));
             });
           </script>';

	$this->event->output($out);

	break;

case 'OnManagerLoginFormRender': //ログイン画面改造、画像決定、

	//ログイン画面のHTML改造
	//※デフォルトのログイン画面が対象なのでカスタマイズしている場合は注意
	if( preg_match('/^1\.0\.10J/',$this->config['settings_version']) ){
		//※1.0.10Jの時は取得場所が違う
		$tpl=$this->output;
	}else{
		$tpl=$this->event->getGlobalVariable('tpl'); //テンプレートを取得
	}

	$rep_to='';
	$rep_to2='';
	
	for( $i=0 ; $i < $viewCount ; $i++){
		$rep_to  .="var imgauth_$i = \$j('#imgauth_$i').attr('checked');\n";
		$rep_to2 .= ",'imgauth_$i':imgauth_$i";
	}
	//$rep_to .= "params = {'username':username,'password':password,'rememberme':rememberme,'ajax':'1','captcha_code':captcha_code $rep_to2};";
	$tpl= preg_replace('/(params = {\'username\'.*)};/',$rep_to.'$1'.$rep_to2.'};',$tpl);
	$rep_to = "jAlert(response,'MODX',function(){location.href = '.';});";
	$tpl= preg_replace('/jAlert\(response\);/',$rep_to,$tpl);
	if( preg_match('/^1\.0\.10J/',$this->config['settings_version']) ){
		$this->output=$tpl;
	}else{
		$this->event->setGlobalVariable('tpl',$tpl);
	}

	//表示する画像の決定
	$viewImgs=array(); //表示する画像情報
	$allImgs=array();
  $imgs=$GetImgFiles(MODX_BASE_PATH . $imgSelect,$contentTypes);
	foreach( $imgs as $val ){
		$allImgs[]=array('select' => true,
										 'path'   => MODX_BASE_PATH . $imgSelect . $val);
	}
	$key=array_rand($allImgs); //最低一つだけ選択画像を抜き取る
	$viewImgs[]=array('select'=>true,'path'=>$allImgs[$key]['path']);
	unset($allImgs[$key]);
  $imgs=$GetImgFiles(MODX_BASE_PATH . $imgUnselect,$contentTypes);
	foreach( $imgs as $val ){
		$allImgs[]=array('select'=> false,
										 'path'  => MODX_BASE_PATH . $imgUnselect. $val);
	}
	for( $i=1 ; $i < $viewCount ; $i++ ){
		if( empty($allImgs) ){
			$LogOut($this,'表示画像数"'.$viewCount.'"に対して画像の数が足りません。');
			break;
		}
		$key=array_rand($allImgs);
		$viewImgs[]=array('select'=>$allImgs[$key]['select'],'path'=>$allImgs[$key]['path']);
		unset($allImgs[$key]);
	}
	shuffle($viewImgs); //シャッフル
	$_SESSION['AdditionalImageAuthentication']=serialize($viewImgs); //保存

	//画像表示
	$out ='<h3 style="border-radius: 3px;background-color: #d0d0d0;color: #383838;">画像認証</h3>';
	$out.='<p>'.$authExplain.'</p>';
  $imgs=$GetImgFiles(MODX_BASE_PATH . $imgUnselect,$contentTypes);
	foreach( $viewImgs as $key => $val){
		$out .= '<div style="float:left;text-align: center;border: 1px solid #999;margin: 0px 8px 12px 8px;">'
			. '<label>'
			. '<img src="'.$ImgToBase64($val['path'],$contentTypes).'" alt="'.$key.'" width="120" height="120"><br />'
			. '<input type="checkbox" id="imgauth_'.$key.'" name="imgauth_'.$key.'" value="checked">'
			. '</label>'
			. '</div>';
	}
	$out.='<br style="clear:both;">';
	$this->event->output($out);
	break;

case 'OnManagerAuthentication': //画像認証確認
	$out=true;
	if( isset($_SESSION['AdditionalImageAuthentication']) ){
		$viewImgs = unserialize($_SESSION['AdditionalImageAuthentication']);
	}else{
		//セッションに画像情報ない場合は認証させない
		$out=false;
	}
	foreach( $viewImgs as $key => $val){
		if( $val['select'] == true &&
				(!isset($_POST['imgauth_'.$key]) || $_POST['imgauth_'.$key] != 'checked')){
			$out=false;
		}
		if( $val['select'] == false &&
				(isset($_POST['imgauth_'.$key]) && $_POST['imgauth_'.$key] == 'checked')){
			$out=false;
		}
	}
	if(!$out){
		//処理を戻すと認証エラーにできないので、ここで残りの処理もこなす
		//※プラグインの仕様見直したいですね。

		$select= 'ua.internalKey,ua.failedlogincount';
		$from  = $this->getFullTableName('manager_users'  ) .' mu,' 
			     . $this->getFullTableName('user_attributes') .' ua';
		$where = "BINARY mu.username='{$username}' and ua.internalKey=mu.id";
		$rs = $this->db->select($select,$from,$where);

		if( $this->db->getRecordCount($rs) == 1 ){ //ユーザが存在しなかったら何もしない

			$row = $this->db->getRow($rs);
			$row['failedlogincount'] +=1;
			$rs = $this->db->update(array('failedlogincount'=>$row['failedlogincount']),
															$this->getFullTableName('user_attributes'),
															"internalKey='{$row['internalKey']}'");

			if( $row['failedlogincount'] >= $this->config['failed_login_attempts'] ){
				//既定回数失敗でロック
				$blockeduntil = time() + ($this->config['blocked_minutes']*60);
        $rs = $this->db->update(array('blockeduntil' => $blockeduntil),
																$this->getFullTableName('user_attributes'),
																"internalKey='{$row['internalKey']}'");
			}else{

				//失敗を重ねると戻りが遅くなる(最大5秒)
        $sleep = (int)$row['failedlogincount']/2;
        if($sleep>5) $sleep = 5;
        sleep($sleep);
			}

		}

		@session_destroy();
		session_unset();

		$e = new errorHandler;
		jsAlert($e->errors[901]);

		//処理は戻さず終了
		exit;
	}

	// true  ... プラグインで認証したのでコアは何もしなくていい
	// false ... プラグインで認証してないor失敗したのでコアで認証してね
	// という動作っぽい
	$this->event->output(false);
	break;

}
